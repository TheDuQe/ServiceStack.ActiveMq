def jobnameparts = JOB_NAME.tokenize('/') as String[]
def artefactsDir = jobnameparts[jobnameparts.length-2]
def solutionFile = jobnameparts[jobnameparts.length-1]
def version = new com.lectra.ci.release.Version(solutionFile,"pilot-monopli-v1r1","-1.-1.-1.+1")

// ***********************************************************************
// <copyright file="JenkinsFile" company="Lectra">
//     Copyright (c) Lectra Systems. All rights reserved.
// </copyright>
// <summary>Build, Test, Package and Archine .Net solution format 2017 - Sdk
// https://docs.microsoft.com/en-us/dotnet/core/porting/
// </summary>
// ***********************************************************************

pipeline {

agent {label 'vs2017'}

environment{
		configuration="Release"
		solutionFile = "${WORKSPACE}\\${solutionFile}"
		packageVersion = ""
    }

stages {
	stage("Build"){
			steps {
				script {
				            if(params.Version != "ReleaseManager")
				            {
				                //Actual : 3 digits
				                packageVersion = params.Version + ".${BUILD_NUMBER}";
								println("VERSION GOT FROM PIPELINE PARAMETER : ${packageVersion}");
				            }
				            else
				            {
				                //Legacy : 4 digits
				                packageVersion=version.getBuildNumber() + "${BUILD_NUMBER}";
								println("VERSION GOT FROM RELEASE MANAGER : ${packageVersion}");
				            }
				
							// There is no folder Legacy : Default target URL for artefacts
							artefactsDir= 	jobnameparts[jobnameparts.length-2] + '/'  + jobnameparts[jobnameparts.length-1]
							
							if(jobnameparts[jobnameparts.length-2]=="Legacy"){
								// There is folder Legacy : Add Jenkins parent folder
							    artefactsDir=	jobnameparts[jobnameparts.length-3] + '/' + jobnameparts[jobnameparts.length-2] + '/' + jobnameparts[jobnameparts.length-1] 
								solutionFile = "${WORKSPACE}\\src\\${solutionFile}"
							} 

							def props = readProperties  file: 'build.properties'
							currentBuild.displayName = packageVersion;
						}
						
					println "Configuration   :					${configuration}"
					println "SLN File        :					${solutionFile}.sln"
					println "Package Version :					${packageVersion}"
					println ".Net environment:"
					bat """ dotnet --info """
                    
					bat """ dotnet build "${solutionFile}.sln" --configuration "${configuration}" -p:Version="${packageVersion}" /flp:v=diag;logfile="${WORKSPACE}\\Temp\\Build.txt" """
			}
		}
		
	stage("Test"){
			steps {
			        println "dotnet Test turned off for this sln"
				    //bat """ dotnet test "${solutionFile}.sln" --logger:Trx """
			}
		}


	stage("Archive"){
		steps {
			script{	
				archive "${WORKSPACE}\\Temp\\**"
				def nuget = tool name: "nuget-5.0.2.5988", type: "com.cloudbees.jenkins.plugins.customtools.CustomTool"
		        withEnv(["PATH+nuget=${nuget}"]){
					for (def file : findFiles(glob: "**/*.${packageVersion}.nupkg")) { 	
						nugetPush(	file.path, 	artefactsDir + '/' + file.name.replaceAll(".${packageVersion}.nupkg","")); 
					}
				}
		    }
		}
	}
}
}